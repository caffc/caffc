module nbody

main(str[] args) -> i32 {
  u32 n = 100

  if args.size() > 1 {
    n = convertStrToU32(args[1])
  }

  NBodySystem bodies = new NBodySystem()

  caffc_printf("%.9f\n", bodies.energy())

  for u32 i = 0; i < n; i += 1 {
    bodies.advance(0.01)
  }

  caffc_printf("%.9f\n", bodies.energy())

  return 0
}

class NBodySystem {
  Body[] _bodies

  constructor() {
    _this._bodies = new Body[5]
    _this._bodies[0] = newBodySun()
    _this._bodies[1] = newBodyJupiter()
    _this._bodies[2] = newBodySaturn()
    _this._bodies[3] = newBodyUranus()
    _this._bodies[4] = newBodyNeptune()

    f64 px, py, pz
    for u32 i = 0; i < 5; i += 1 {
       px += _this._bodies[i].vx * _this._bodies[i].mass;
       py += _this._bodies[i].vy * _this._bodies[i].mass;
       pz += _this._bodies[i].vz * _this._bodies[i].mass;
    }

    bodies[0].offsetMomentum(px, py, pz)
  }

  advance(f64 dt) {
    Body[] b = _this._bodies;

    for u32 i=0; i < 5 - 1; i += 1 { // FIXME: 5 should be a constant
      Body iBody = b[i];
      f64 iMass = iBody.mass;
      f64 ix = iBody.x, iy = iBody.y, iz = iBody.z;

      for u32 j = i + 1; j < 5; j += 1 {
        Body jBody = b[j];
        f64 dx = ix - jBody.x;
        f64 dy = iy - jBody.y;
        f64 dz = iz - jBody.z;

        f64 dSquared = dx * dx + dy * dy + dz * dz;
        f64 distance = Math.sqrt(dSquared);
        f64 mag = dt / (dSquared * distance);

        f64 jMass = jBody.mass;

        iBody.vx -= dx * jMass * mag;
        iBody.vy -= dy * jMass * mag;
        iBody.vz -= dz * jMass * mag;

        jBody.vx += dx * iMass * mag;
        jBody.vy += dy * iMass * mag;
        jBody.vz += dz * iMass * mag;
      }
    }

    for i = 0; i < 5; i += 1 {
      Body body = b[i];

      body.x += dt * body.vx;
      body.y += dt * body.vy;
      body.z += dt * body.vz;
    }
  }

  energy() -> f64 {
    f64 dx, dy, dz, distance
    f64 e = 0.0

    for u32 i = 0; i < bodies.length; i += 1 {
      Body iBody = bodies[i]
      e += 0.5 * iBody.mass *
              ( iBody.vx * iBody.vx
              + iBody.vy * iBody.vy
              + iBody.vz * iBody.vz )

      for u32 j = i + 1; j < bodies.length; j += 1 {
        Body jBody = bodies[j]
        dx = iBody.x - jBody.x
        dy = iBody.y - jBody.y
        dz = iBody.z - jBody.z

        distance = Math.sqrt(dx*dx + dy*dy + dz*dz)
        e -= (iBody.mass * jBody.mass) / distance
      }
    }

    return e;
  }
}


final class Body {
   static final f64 PI = 3.141592653589793;
   static final f64 SOLAR_MASS = 4 * PI * PI;
   static final f64 DAYS_PER_YEAR = 365.24;

   public f64 x, y, z, vx, vy, vz, mass;

   public Body(){}

   static Body jupiter(){
      Body p = new Body();
      p.x = 4.84143144246472090e+00;
      p.y = -1.16032004402742839e+00;
      p.z = -1.03622044471123109e-01;
      p.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
      p.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
      p.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
      p.mass = 9.54791938424326609e-04 * SOLAR_MASS;
      return p;
   }

   static Body saturn(){
      Body p = new Body();
      p.x = 8.34336671824457987e+00;
      p.y = 4.12479856412430479e+00;
      p.z = -4.03523417114321381e-01;
      p.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
      p.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
      p.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
      p.mass = 2.85885980666130812e-04 * SOLAR_MASS;
      return p;
   }

   static Body uranus(){
      Body p = new Body();
      p.x = 1.28943695621391310e+01;
      p.y = -1.51111514016986312e+01;
      p.z = -2.23307578892655734e-01;
      p.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
      p.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
      p.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
      p.mass = 4.36624404335156298e-05 * SOLAR_MASS;
      return p;
   }

   static Body neptune(){
      Body p = new Body();
      p.x = 1.53796971148509165e+01;
      p.y = -2.59193146099879641e+01;
      p.z = 1.79258772950371181e-01;
      p.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
      p.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
      p.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
      p.mass = 5.15138902046611451e-05 * SOLAR_MASS;
      return p;
   }

   static Body sun(){
      Body p = new Body();
      p.mass = SOLAR_MASS;
      return p;
   }

   Body offsetMomentum(f64 px, f64 py, f64 pz){
      vx = -px / SOLAR_MASS;
      vy = -py / SOLAR_MASS;
      vz = -pz / SOLAR_MASS;
      return this;
   }
}

