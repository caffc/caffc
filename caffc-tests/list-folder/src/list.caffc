module main

native {
  #include <dirent.h>
  #include <stdio.h>
}

class File {
  str name

  constructor(str name) {
    _this.name = name
  }

  compareTo(File other) -> i32 {
    return _this.name.compareTo(other.name)
  }
}

main() -> i32 {
  ArrayList<File> files = list_files(".")
  sort(files)

  for u32 i = 0; i < files.length; i = i + 1 {
    File f = files.get(i)
    print(f.name)
  }

  return 0
}

list_files(str path) -> ArrayList<File> {
  ArrayList<File> result = new ArrayList()

  native {
    DIR *dir = NULL;
    struct dirent* ent = NULL;

    dir = opendir(path->_caffc_data);

    while ((ent = readdir(dir)) != NULL) {
      main_add_item_to_list(result, ent->d_name);
    }

    closedir(dir);
  }

  return result
}

add_item_to_list(ArrayList<File> list, ptr path) {
  str s = str.fromPtr(path)

  if (s.indexOf(".") == 0) {
    return // exclude hidden files
  }

  list.add(new File(s))
}

sort(ArrayList<File> file_list) -> void {
    for i32 i = 0; i < file_list.size(); i += 1 {
        for i32 j = 0; j < file_list.size() - i - 1; j += 1 {
            File f = file_list.get(j)
            if f.compareTo(file_list.get(j + 1)) > 0 {
                File temp = file_list.get(j)
                file_list.set(j, file_list.get(j + 1))
                file_list.set(j + 1, temp)
            }
        }
    }
}


